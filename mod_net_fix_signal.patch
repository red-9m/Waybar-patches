diff --git a/include/modules/network.hpp b/include/modules/network.hpp
index 8ec6b6d..60ceeaa 100644
--- a/include/modules/network.hpp
+++ b/include/modules/network.hpp
@@ -31,6 +31,7 @@ class Network : public ALabel {
   static int handleEvents(struct nl_msg*, void*);
   static int handleEventsDone(struct nl_msg*, void*);
   static int handleScan(struct nl_msg*, void*);
+  static int handleInfo(struct nl_msg*, void*);
 
   void askForStateDump(void);
 
@@ -38,7 +39,6 @@ class Network : public ALabel {
   void createInfoSocket();
   void createEventSocket();
   void parseEssid(struct nlattr**);
-  void parseSignal(struct nlattr**);
   void parseFreq(struct nlattr**);
   bool associatedOrJoined(struct nlattr**);
   bool checkInterface(std::string name);
@@ -52,6 +52,7 @@ class Network : public ALabel {
   sa_family_t family_;
   struct sockaddr_nl nladdr_ = {0};
   struct nl_sock* sock_ = nullptr;
+  struct nl_sock* sock_info_ = nullptr;
   struct nl_sock* ev_sock_ = nullptr;
   int efd_;
   int ev_fd_;
diff --git a/src/modules/network.cpp b/src/modules/network.cpp
index 3fe4a8b..a900b25 100644
--- a/src/modules/network.cpp
+++ b/src/modules/network.cpp
@@ -153,6 +153,10 @@ waybar::modules::Network::~Network() {
     nl_close(sock_);
     nl_socket_free(sock_);
   }
+  if (sock_info_ != nullptr) {
+    nl_close(sock_info_);
+    nl_socket_free(sock_info_);
+  }
 }
 
 void waybar::modules::Network::createEventSocket() {
@@ -210,12 +214,19 @@ void waybar::modules::Network::createEventSocket() {
 
 void waybar::modules::Network::createInfoSocket() {
   sock_ = nl_socket_alloc();
+  sock_info_ = nl_socket_alloc();
   if (genl_connect(sock_) != 0) {
     throw std::runtime_error("Can't connect to netlink socket");
   }
+  if (genl_connect(sock_info_) != 0) {
+    throw std::runtime_error("Can't connect to netlink socket");
+  }
   if (nl_socket_modify_cb(sock_, NL_CB_VALID, NL_CB_CUSTOM, handleScan, this) < 0) {
     throw std::runtime_error("Can't set callback");
   }
+  if (nl_socket_modify_cb(sock_info_, NL_CB_VALID, NL_CB_CUSTOM, handleInfo, this) < 0) {
+    throw std::runtime_error("Can't set callback");
+  }
   nl80211_id_ = genl_ctrl_resolve(sock_, "nl80211");
   if (nl80211_id_ < 0) {
     spdlog::warn("Can't resolve nl80211 interface");
@@ -761,11 +772,60 @@ int waybar::modules::Network::handleScan(struct nl_msg *msg, void *data) {
     return NL_SKIP;
   }
   net->parseEssid(bss);
-  net->parseSignal(bss);
   net->parseFreq(bss);
   return NL_OK;
 }
 
+int waybar::modules::Network::handleInfo(struct nl_msg *msg, void *data) {
+static struct nla_policy stats_policy[NL80211_STA_INFO_MAX + 1]{};
+  stats_policy[NL80211_STA_INFO_INACTIVE_TIME].type = NLA_U32;
+  stats_policy[NL80211_STA_INFO_RX_BYTES].type = NLA_U32;
+  stats_policy[NL80211_STA_INFO_TX_BYTES].type = NLA_U32;
+  stats_policy[NL80211_STA_INFO_RX_PACKETS].type = NLA_U32;
+  stats_policy[NL80211_STA_INFO_TX_PACKETS].type = NLA_U32;
+  stats_policy[NL80211_STA_INFO_SIGNAL].type = NLA_U8;
+  stats_policy[NL80211_STA_INFO_TX_BITRATE].type = NLA_NESTED;
+  stats_policy[NL80211_STA_INFO_LLID].type = NLA_U16;
+  stats_policy[NL80211_STA_INFO_PLID].type = NLA_U16;
+  stats_policy[NL80211_STA_INFO_PLINK_STATE].type = NLA_U8;
+
+  auto net = static_cast<waybar::modules::Network *>(data);
+  auto gnlh = static_cast<genlmsghdr *>(nlmsg_data(nlmsg_hdr(msg)));
+  struct nlattr *tb[NL80211_ATTR_MAX + 1];
+  struct nlattr *sinfo[NL80211_STA_INFO_MAX + 1];
+
+  nla_parse(tb,
+            NL80211_ATTR_MAX,
+            genlmsg_attrdata(gnlh, 0),
+            genlmsg_attrlen(gnlh, 0),
+            NULL);
+
+  if (!tb[NL80211_ATTR_STA_INFO])
+    return NL_SKIP;
+
+  if (nla_parse_nested(sinfo, NL80211_STA_INFO_MAX,
+                       tb[NL80211_ATTR_STA_INFO], stats_policy)) {
+    fprintf(stderr, "failed to parse nested attributes!\n"); return NL_SKIP;
+  }
+
+  if (sinfo[NL80211_STA_INFO_SIGNAL]) {
+    net->signal_strength_dbm_ = (int8_t)nla_get_u8(sinfo[NL80211_STA_INFO_SIGNAL]);
+
+    // If a signal is too strong, it can overwhelm receiving circuity that is designed
+    // to pick up and process a certain signal level. The following percentage is scaled to
+    // punish signals that are too strong (>= -45dBm) or too weak (<= -45 dBm).
+    const int hardwareOptimum = -45;
+    const int hardwareMin = -90;
+    const int strength =
+        100 -
+        ((abs(net->signal_strength_dbm_ - hardwareOptimum) / double{hardwareOptimum - hardwareMin}) *
+         100);
+    net->signal_strength_ = std::clamp(strength, 0, 100);
+  }
+
+  return NL_OK;
+}
+
 void waybar::modules::Network::parseEssid(struct nlattr **bss) {
   if (bss[NL80211_BSS_INFORMATION_ELEMENTS] != nullptr) {
     auto ies = static_cast<char *>(nla_data(bss[NL80211_BSS_INFORMATION_ELEMENTS]));
@@ -785,42 +845,6 @@ void waybar::modules::Network::parseEssid(struct nlattr **bss) {
   }
 }
 
-void waybar::modules::Network::parseSignal(struct nlattr **bss) {
-  if (bss[NL80211_BSS_SIGNAL_MBM] != nullptr) {
-    // signalstrength in dBm from mBm
-    signal_strength_dbm_ = nla_get_s32(bss[NL80211_BSS_SIGNAL_MBM]) / 100;
-    // WiFi-hardware usually operates in the range -90 to -30dBm.
-
-    // If a signal is too strong, it can overwhelm receiving circuity that is designed
-    // to pick up and process a certain signal level. The following percentage is scaled to
-    // punish signals that are too strong (>= -45dBm) or too weak (<= -45 dBm).
-    const int hardwareOptimum = -45;
-    const int hardwareMin = -90;
-    const int strength =
-        100 -
-        ((abs(signal_strength_dbm_ - hardwareOptimum) / double{hardwareOptimum - hardwareMin}) *
-         100);
-    signal_strength_ = std::clamp(strength, 0, 100);
-
-    if (signal_strength_dbm_ >= -50) {
-      signal_strength_app_ = "Great Connectivity";
-    } else if (signal_strength_dbm_ >= -60) {
-      signal_strength_app_ = "Good Connectivity";
-    } else if (signal_strength_dbm_ >= -67) {
-      signal_strength_app_ = "Streaming";
-    } else if (signal_strength_dbm_ >= -70) {
-      signal_strength_app_ = "Web Surfing";
-    } else if (signal_strength_dbm_ >= -80) {
-      signal_strength_app_ = "Basic Connectivity";
-    } else {
-      signal_strength_app_ = "Poor Connectivity";
-    }
-  }
-  if (bss[NL80211_BSS_SIGNAL_UNSPEC] != nullptr) {
-    signal_strength_ = nla_get_u8(bss[NL80211_BSS_SIGNAL_UNSPEC]);
-  }
-}
-
 void waybar::modules::Network::parseFreq(struct nlattr **bss) {
   if (bss[NL80211_BSS_FREQUENCY] != nullptr) {
     // in GHz
@@ -855,6 +879,16 @@ auto waybar::modules::Network::getInfo() -> void {
     return;
   }
   nl_send_sync(sock_, nl_msg);
+
+  struct nl_msg *nl_msg2 = nlmsg_alloc();
+  if (genlmsg_put(nl_msg2, NL_AUTO_PORT, NL_AUTO_SEQ, nl80211_id_, 0, NLM_F_DUMP,
+                  NL80211_CMD_GET_STATION, 0) == nullptr ||
+      nla_put_u32(nl_msg2, NL80211_ATTR_IFINDEX, ifid_) < 0) {
+    nlmsg_free(nl_msg2);
+    return;
+  }
+
+  nl_send_sync(sock_info_, nl_msg2);
 }
 
 // https://gist.github.com/rressi/92af77630faf055934c723ce93ae2495
